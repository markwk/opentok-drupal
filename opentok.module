<?php

define('OPENTOK_TOKEN_SENTINEL', 'T1==');
define('OPENTOK_SDK_VERSION', 'tbphp-v0.91.2011-08-07');
define('OPENTOK_STAGING_SERVER', 'https://staging.tokbox.com/hl');
define('OPENTOK_PRODUCTION_SERVER', 'https://api.opentok.com/hl');
define('OPENTOK_STAGING_JS', 'http://staging.tokbox.com/v0.91/js/TB.min.js');
define('OPENTOK_PRODUCTION_JS', 'http://static.opentok.com/v0.91/js/TB.min.js');

function opentok_menu() {
  $items = array();

  $items['admin/settings/opentok'] = array(
    'title' => 'OpenTok',
    'description' => 'Configuration for the OpenTok module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opentok_config_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['opentok/stream-wrapper'] = array(
    'page callback' => 'opentok_stream_wrapper_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['opentok/register'] = array(
    'page callback' => 'opentok_register_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $item['opentok/snapshot/upload'] = array(
    'page callback' => 'opentok_snapshot_upload',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function opentok_config_form(&$form_state) {
  $form['opentok_api_key'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('opentok_api_key', ''),
    '#title' => t('OpenTok API Key'),
    '#required' => TRUE,
  );

  $form['opentok_api_secret'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('opentok_api_secret', ''),
    '#title' => t('OpenTok API Secret'),
    '#required' => TRUE,
  );

  $form['opentok_staging'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('opentok_staging', FALSE),
    '#title' => t('Use OpenTok staging server.'),
  );

  return system_settings_form($form);
}

function opentok_config_form_validate($form, &$form_state) {
  $form_state['values']['opentok_api_key'] = trim($form_state['values']['opentok_api_key']);
  $form_state['values']['opentok_api_secret'] = trim($form_state['values']['opentok_api_secret']);
}

function opentok_field_info() {
  return array(
    'opentok' => array(
      'label' => t('OpenTok Session'),
      'description' => t('This field stores an OpenTok session.'),
    ),
  );
}

function opentok_field_settings($op, $field){
  switch($op){
    case 'form':
      $form = array();
      $form['author_role'] = array(
        '#type' => 'select',
        '#title' => t('OpenTok Session role for author'),
        '#options' => array(
          'subscriber' => t('Subscriber'),
          'publisher' => t('Publisher'),
          'moderator' => t('Moderator'),
        ),
        '#default_value' => $field['author_role'],
        '#required' => FALSE,
      );
      $form['regenerate_session'] = array(
        '#type' => 'checkbox',
        '#title' => t('Regenerate session on node save'),
        '#default_value' => $field['regenerate_session'],
      );
      return $form;
    case 'save':
      return array('author_role', 'regenerate_session');
    case 'database columns':
      return array(
        'api_key' => array(
          'type' => 'varchar',
          'length' => 32,
        ),
        'api_staging' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'session_id' => array(
          'type' => 'varchar',
          'length' => 128,
        ),
        'auto_connect' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'auto_publish' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'push_talk' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'roles' => array(
          'type' => 'varchar',
          'length' => 255,
          'serialize' => TRUE,
        ),
      );
  }
}

function opentok_field($op, &$node, $field, &$items, $teaser, $page) {
  switch($op){
    case 'presave':
      if ($field['type'] == 'opentok') {
        $api_key = variable_get('opentok_api_key', NULL);
        $api_staging = variable_get('opentok_staging', FALSE);

        foreach ($items as $delta => $item) {
          if (empty($item['session_id']) || $item['regenerate_session'] || $item['api_key'] != $api_key || $item['api_staging'] != $api_staging) {
            $items[$delta]['api_key'] = $api_key;
            $items[$delta]['api_staging'] = $api_staging;
            $items[$delta]['session_id'] = opentok_create_session(ip_address());
          }
        }
      }
    break;
    case 'load':
      if (empty($items)) {
        return array();
      }
      foreach ($items as $delta => $item) {
        if (!empty($item['roles'])) {
          $items[$delta]['roles'] = unserialize($item['roles']);
        }
      }
      return array($field['field_name'] => $items);
  }
}

function opentok_content_is_empty($item, $field) {
  return FALSE;
}

function opentok_widget_info() {
  return array(
    'opentok_default' => array(
      'label' => t('OpenTok'),
      'field types' => array('opentok'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

function opentok_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array();
  $element['api_key'] = array(
    '#type' => 'value',
    '#default_value' => isset($items[$delta]['api_key']) ? $items[$delta]['api_key'] : NULL,
  );
  $element['api_staging'] = array(
    '#type' => 'value',
    '#default_value' => isset($items[$delta]['api_staging']) ? $items[$delta]['api_staging'] : NULL,
  );
  $element['session_id'] = array(
    '#type' => 'value',
    '#default_value' => isset($items[$delta]['session_id']) ? $items[$delta]['session_id'] : NULL,
  );
  if(isset($items[$delta]['session_id'])){
    $element['regenerate_session'] = array(
      '#type' => 'checkbox',
      '#title' => t('Regenerate OpenTok session'),
      '#default_value' => $field['regenerate_session'],
    );
  }  
  $element['auto_connect'] = array(
    '#type' => 'checkbox',
    '#default_value' => isset($items[$delta]['auto_connect']) ? $items[$delta]['auto_connect'] : FALSE,
    '#title' => t('Auto-connect to OpenTok session'),
  );
  $element['auto_publish'] = array(
    '#type' => 'checkbox',
    '#default_value' => isset($items[$delta]['auto_publish']) ? $items[$delta]['auto_publish'] : FALSE,
    '#title' => t('Auto-publish to OpenTok session'),
  );
  $element['push_talk'] = array(
    '#type' => 'checkbox',
    '#default_value' => isset($items[$delta]['push_talk']) ? $items[$delta]['push_talk'] : FALSE,
    '#title' => t('Enable Push To Talk'),
  );
  $element['roles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Session Roles'),
    '#tree' => TRUE,
  );
  $roles = user_roles();
  foreach ($roles as $role_id => $role_name) {
    $element['roles'][$role_id] = array(
      '#type' => 'select',
      '#title' => t("OpenTok role for '!role'", array('!role' => $role_name)),
      '#options' => array(
        'subscriber' => t('Subscriber'),
        'publisher' => t('Publisher'),
        'moderator' => t('Moderator'),
      ),
      '#default_value' => isset($items[$delta]['roles'][$role_id]) ? $items[$delta]['roles'][$role_id] : 'subscriber',
    );
  }
  $element['#tree'] = TRUE;
  $element['#type'] = 'fieldset';
  $element['#weight'] = $field['widget']['weight'];
  $element['#title'] = $field['widget']['label'];
  return $element;
}

function opentok_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('opentok'),
    ),
  );
}

function opentok_create_session($location, $properties = array()) {
  $properties['location'] = $location;

  $create_session_result = _opentok_do_request("/session/create", $properties);
  $create_session_XML = simplexml_load_string($create_session_result, 'SimpleXMLElement', LIBXML_NOCDATA);

  if(!$create_session_XML) {
    drupal_set_message(t("Failed to create OpenTok session: Invalid response from server"), "error");
  }

  $errors = $create_session_XML->xpath("//error");
  if($errors) {
    $errMsg = $errors[0]->xpath("//@message");
    if($errMsg) {
      $errMsg = (string)$errMsg[0]['message'];
    } else {
      $errMsg = "Unknown error";
    }
    watchdog("Error " . $create_session_XML->error['code'] ." ". $create_session_XML->error->children()->getName() . ": " . $errMsg, WATCHDOG_ERROR);
  }
  if(!isset($create_session_XML->Session->session_id)) {
    drupal_set_message(t("Failed to create OpenTok session."), "error");
    return NULL;
  }

  return $create_session_XML->Session->session_id;
}

function opentok_generate_token($session_id = '', $role = '', $expire_time = NULL) {
  $api_key = variable_get('opentok_api_key', '');
  $api_secret = variable_get('opentok_api_secret', '');
  $create_time = time();

  $nonce = microtime(true) . mt_rand();

  $data = array(
    'session_id' => $session_id,
    'create_time' => $create_time,
    'role' => $role,
    'nonce' => $nonce,
  );
  if (!is_null($expire_time))
    $data['expire_time'] = $expire_time;

  $data_string = _opentok_drupal_http_build_query($data);
  $sig = hash_hmac("sha1", $data_string, $api_secret);
  $sdk_version = OPENTOK_SDK_VERSION;

  $token_data = array(
    'partner_id' => $api_key,
    'sdk_version' => $sdk_version,
    'sig' => $sig,
  );
  $token_data_string = _opentok_drupal_http_build_query($token_data);

  return OPENTOK_TOKEN_SENTINEL . base64_encode("{$token_data_string}:{$data_string}");
}

function opentok_user_role($role_map, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  $roles = array_intersect_key($role_map, $account->roles);

  return opentok_highest_role($roles);
}

function opentok_highest_role($roles_list) {
  $roles = array_values(
    array_intersect(
      array('moderator', 'publisher', 'subscriber'),
      $roles_list
    )
  );

  return !empty($roles) ? $roles[0] : '';
}

function opentok_stream_wrapper_js() {
  $opentok_session = _opentok_drupal_json_decode($_REQUEST['opentok_session']);
  $opentok_stream = _opentok_drupal_json_decode($_REQUEST['opentok_stream']);
  echo theme('opentok_stream', array('session' => $opentok_session, 'stream' => $opentok_stream));
}

function opentok_register_js() {
  global $user;
  if ($user->uid && $opentok_connection = _opentok_drupal_json_decode($_REQUEST['opentok_connection'])) {
    $record = array(
      'connection_id' => $opentok_connection['connectionId'],
      'uid' => $user->uid,
      'creation_time' => substr($opentok_connection['creationTime'], 0, 10),
    );
    drupal_write_record('opentok_connection', $record);
  }
}

function opentok_get_connection_uid($connection_id) {
  return db_result(db_query('SELECT uid FROM {opentok_connection} WHERE connection_id = "%s"', array($connection_id)));
}

function _opentok_do_request($url, $data) {
  $api_key = variable_get('opentok_api_key', NULL);
  $api_secret = variable_get('opentok_api_secret', NULL);
  $api_staging = variable_get('opentok_staging', FALSE);

  $api_server = $api_staging ? OPENTOK_STAGING_SERVER : OPENTOK_PRODUCTION_SERVER;

  $url = $api_server . $url;

  if (is_array($data)) {
    $data['api_key'] = $api_key;
    $data = _opentok_drupal_http_build_query($data);
  }
  
  $headers = array(
    'Content-type' => 'application/x-www-form-urlencoded',
    'X-TB-PARTNER-AUTH' => "{$api_key}:{$api_secret}",
  );

  $response = drupal_http_request($url, $headers, 'POST', $data);

  return $response->data;
}

function _opentok_drupal_http_build_query(array $query, $parent = '') {
  $params = array();

  foreach ($query as $key => $value) {
    $key = ($parent ? $parent . '[' . rawurlencode($key) . ']' : rawurlencode($key));

    // Recurse into children.
    if (is_array($value)) {
      $params[] = drupal_http_build_query($value, $key);
    }
    // If a query parameter value is NULL, only append its key.
    elseif (!isset($value)) {
      $params[] = $key;
    }
    else {
      // For better readability of paths in query strings, we decode slashes.
      $params[] = $key . '=' . str_replace('%2F', '/', rawurlencode($value));
    }
  }

  return implode('&', $params);
}

function _opentok_drupal_json_decode($var) {
  return json_decode($var, TRUE);
}

function opentok_theme($existing, $type, $theme, $path) {
  return array(
    'opentok_formatter_default' => array(
      'arguments' => array('element' => NULL)
    ),
    'opentok_container' => array(
      'arguments' => array('element' => NULL),
    ),
    'opentok_publisher' => array(
      'arguments' => array('element' => NULL),
    ),
    'opentok_stream' => array(
      'arguments' => array('session' => NULL, 'stream' => NULL),
    ),
    'opentok_subscriber' => array(
      'arguments' => array('element' => NULL),
    ),
    'opentok_connect' => array(
      'arguments' => array('element' => NULL),
    ),
    'opentok_disconnect' => array(
      'arguments' => array('element' => NULL),
    ),
    'opentok_publish' => array(
      'arguments' => array('element' => NULL),
    ),
    'opentok_unpublish' => array(
      'arguments' => array('element' => NULL),
    ),
    'opentok_push_talk_mode' => array(
      'arguments' => array('element' => NULL),
    ),
    'opentok_push_talk_toggle' => array(
      'arguments' => array('element' => NULL),
    ),
    'opentok_mute' => array(
      'arguments' => array('session' => NULL, 'stream' => NULL),
    ),
    'opentok_unmute' => array(
      'arguments' => array('session' => NULL, 'stream' => NULL),
    ),
    'opentok_close' => array(
      'arguments' => array('session' => NULL, 'stream' => NULL),
    ),
    'opentok_force_unpublish' => array(
      'arguments' => array('session' => NULL, 'stream' => NULL),
    ),
    'opentok_force_disconnect' => array(
      'arguments' => array('session' => NULL, 'stream' => NULL),
    ),
    'opentok_snapshot_publisher' => array(
      'arguments' => array('element' => NULL),
    ),
    'opentok_snapshot_stream' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

function theme_opentok_formatter_default($element){
  global $user;
  $field = content_fields($element['#field_name'], $element['#node']->type);
  $api_staging = variable_get('opentok_staging', FALSE);
  $api_key = variable_get('opentok_api_key', NULL);
  $api_js = $api_staging ? OPENTOK_STAGING_JS : OPENTOK_PRODUCTION_JS;
  
  $item = $element['#item'];
  if ($item['api_key'] == $api_key && $item['api_staging'] == $api_staging) {
    $item_id = "{$element['#field_name']}-{$element['#node']->nid}-{$item['#delta']}";
    $role = opentok_user_role($item['roles']);
    if ($element['#node']->uid == $user->uid) {
      $role = opentok_highest_role(array($role, $field['author_role']));
    }
    $output = theme('opentok_container', array('id' => $item_id, 'item' => $item));
    drupal_add_js(array(
      'openTok' => array(
        $item_id => array(
          'sessionId' => $item['session_id'],
          'apiKey' => $api_key,
          'connectionToken' => opentok_generate_token($item['session_id'], $role),
          'autoConnect' => (bool)$item['auto_connect'],
          'autoPublish' => (bool)$item['auto_publish'],
          'pushTalk' => (bool)$item['push_talk'],
        ),
      ),
    ),'setting');
    drupal_set_html_head('<script type="text/javascript" src="' . $api_js . '"></script>');
    if ($jquery_resize_path = libraries_get_path('jquery.resize')) {
      drupal_add_js($jquery_resize_path . '/jquery.ba-resize.js');
    }
    if ($jquery_opentok_path = libraries_get_path('jquery.opentok')) {
      drupal_add_js($jquery_opentok_path . '/jquery.opentok.js');
      drupal_add_js($jquery_opentok_path . '/jquery.opentok.layout.js');
      drupal_add_css($jquery_opentok_path . '/jquery.opentok.css');
      drupal_add_css($jquery_opentok_path . '/jquery.opentok.layout.css');
    }
    if ($json_js_path = libraries_get_path('json-js')) {
      drupal_add_js($json_js_path . '/json2.js');
    }
    $opentok_path = drupal_get_path('module', 'opentok');
    drupal_add_js($opentok_path . '/opentok.js');
    drupal_add_css($opentok_path . '/opentok.css');
  }
  return $output;
}

function theme_opentok_container($element) {
  global $user;
  $output = "<div id='{$element['id']}' class='opentok-container'><div class='opentok-controls'>";
  $output .= theme('opentok_connect', $element);
  $output .= theme('opentok_disconnect', $element);
  $output .= theme('opentok_publish', $element);
  $output .= '</div><div class="opentok-streams clear-block"><div class="opentok-publisher-wrapper">';
  $output .= '<div class="opentok-username">' . theme('username', $user) . '</div>';
  $output .= '<div class="opentok-publisher-controls">';
  $output .= theme('opentok_push_talk_mode', $element);
  $output .= theme('opentok_push_talk_toggle', $element);
  $output .= theme('opentok_snapshot_publisher', $element);
  $output .= theme('opentok_unpublish', $element);
  $output .= '</div><div class="opentok-publisher"></div></div></div></div>';
  return $output;
}

// all of these will probably be accessed through ajax calls

function theme_opentok_publisher($element) {

}

function theme_opentok_stream($variables) {
  $output = '<div class="opentok-stream-wrapper">';
  $output .= '<div class="opentok-stream-controls">';
  $output .= theme('opentok_mute', $variables);
  $output .= theme('opentok_unmute', $variables);
  $output .= theme('opentok_snapshot_stream', $variables);
  if ($variables['session']['capabilities']['forceDisconnect']) {
    $output .= theme('opentok_force_unpublish', $variables);
  }
  if ($variables['session']['capabilities']['forceUnpublish']) {
    $output .= theme('opentok_force_disconnect', $variables);
  }
  $output .= theme('opentok_close', $variables);
  $output .= '</div>';
  if ($stream_uid = opentok_get_connection_uid($variables['stream']['connection']['connectionId'])) {
    $stream_user = user_load($stream_uid);
    $output .= '<div class="opentok-username">' . theme('username', $stream_user) . "</div>";
  }
  $output .= '<div class="opentok-stream">';
  $output .= '</div>';
  return $output;
}

function theme_opentok_mute($variables) {
  return l(t('Mute'), '', array('attributes' => array('class' => 'opentok-mute')));
}

function theme_opentok_unmute($variables) {
  return l(t('Unmute'), '', array('attributes' => array('class' => 'opentok-unmute')));
}

function theme_opentok_close($variables) {
  return l(t('Close'), '', array('attributes' => array('class' => 'opentok-close')));
}

function theme_opentok_snapshot_stream($variables) {
  return l(t('Snapshot'), '', array('attributes' => array('class' => 'opentok-snapshot-stream')));
}

function theme_opentok_force_unpublish($variables) {
  return l(t('Unpublish'), '', array('attributes' => array('class' => 'opentok-force-unpublish')));
}

function theme_opentok_force_disconnect($variables) {
  return l(t('Disconnect'), '', array('attributes' => array('class' => 'opentok-force-disconnect')));
}

function theme_opentok_subscriber($element) {

}

function theme_opentok_connect($element) {
  return l(t('Connect'), '', array('attributes' => array('class' => 'opentok-connect')));
}

function theme_opentok_disconnect($element) {
  return l(t('Disconnect'), '', array('attributes' => array('class' => 'opentok-disconnect')));
}

function theme_opentok_publish($element) {
  return l(t('Publish'), '', array('attributes' => array('class' => 'opentok-publish')));
}

function theme_opentok_unpublish($element) {
  return l(t('Unpublish'), '', array('attributes' => array('class' => 'opentok-unpublish')));
}

function theme_opentok_push_talk_mode($element) {
  return l(t('Push To Talk'), '', array('attributes' => array('class' => 'opentok-push-talk-mode')));
}

function theme_opentok_push_talk_toggle($element) {
  return l(t('Talk'), '', array('attributes' => array('class' => 'opentok-push-talk-toggle')));
}

function theme_opentok_snapshot_publisher($element) {
  return l(t('Snapshot'), '', array('attributes' => array('class' => 'opentok-snapshot-publisher')));
}

function opentok_snapshot_upload(){
  print 'blah';
  exit();
}
